package {{.PackageName}}

import (
	"database/sql"
	_ "github.com/mattn/go-sqlite3"
	SQLL "github.com/eshu0/persist/pkg/sqllite"	
	per "github.com/eshu0/persist/pkg/interfaces"
	data "github.com/eshu0/Pangu/examples/Autogen/Todos/Models"
)

//
// Built from:
// {{.Database.Name}} - {{.Database.Filename}}
/*
 {{.Table.Sql}}
 */
//

// Table fields

// {{.TableConstant.Comment}}
const {{.TableConstant.Name}} = "{{.TableConstant.Value}}"

// {{.IdConstant.Comment}}
const {{.IdConstant.Name}} = "{{.IdConstant.Value}}"

{{range .Constants}}
// {{.Comment}}
const {{.Name}} = "{{.Value}}"
{{end}}


// HANDLER

type {{.StorageHandlerName}} struct {
	per.IStorageHandler
	Parent *SQLL.SQLLiteDatastore
	Executor *SQLL.SQLLightQueryExecutor
}

func New{{.StorageHandlerName}}(datastore *SQLL.SQLLiteDatastore) *{{.StorageHandlerName}} {
	ds := {{.StorageHandlerName}}{}
	ds.Parent = datastore
	ds.Executor = SQLL.NewSQLLightQueryExecutor(datastore)
	return &ds
}

// Start IStorage Handler 
func (handler *{{.StorageHandlerName}}) GetPersistantStorage() per.IPersistantStorage {
	return handler.Parent
}

func (handler *{{.StorageHandlerName}}) SetPersistantStorage(persistant per.IPersistantStorage) { // per.IStorageHandler {
	res := persistant.(*SQLL.SQLLiteDatastore)
	handler.Parent = res
	//return handler
}

// This function creates the database table for {{.StructDetails.Name}} 
func (handler *{{.StorageHandlerName}}) CreateStructures() per.IQueryResult {
	handler.Parent.LogDebug("CreateStructures","Executing Query")
	return handler.Executor.ExecuteQuery(`{{.CreateTableSQL}}`)
}

// End Istorage 

// This function {{.StructDetails.Name}} removes all data for the table
func (handler *{{.StorageHandlerName}}) Wipe() SQLL.SQLLiteQueryResult {
	return handler.ConvertResult(handler.Executor.ExecuteQuery("DELETE FROM " + {{.TableConstant.Name}}))
}

// This adds {{.StructDetails.Name}} to the database 
func (handler *{{.StorageHandlerName}}) Create(Data per.IDataItem) SQLL.SQLLiteQueryResult {
	data := Data.(data.{{.StructDetails.Name}})
	return handler.ConvertResult(handler.Executor.ExecuteInsertQuery("INSERT INTO " + {{.TableConstant.Name}} + " ( "{{.InsertDBColumns}}" ) VALUES ({{.ParametersColumns}})", {{.InsertGo}}))
}

func (handler *{{.StorageHandlerName}}) Update(Data per.IDataItem) SQLL.SQLLiteQueryResult  {
	data := Data.(data.{{.StructDetails.Name}})
	return handler.ConvertResult(handler.Executor.ExecuteQuery("UPDATE " + {{.TableConstant.Name}} + " SET "{{.UpdateDBColumns}}"  WHERE [" + {{.IdConstant.Name}} + "] = ?",{{.UpdateGo}}))
}

func (handler *{{.StorageHandlerName}}) ConvertResult(data per.IQueryResult) SQLL.SQLLiteQueryResult {
	// this needs to be implemented
	return  SQLL.ResultToSQLLiteQueryResult(data)
}


{{$handlername := .StorageHandlerName }}
{{$sdetails := .StructDetails }}
{{$selectdbcols := .SelectDBColumns }}
{{$tablecnstsname := .TableConstant.Name }}

{{range .StructDetails.Properties}}
func (handler *{{$handlername}}) FindBy{{.Name}}(SearchData {{.GType}})  SQLL.SQLLiteQueryResult   {
	return handler.ConvertResult(handler.Executor.ExecuteResult("SELECT "{{$selectdbcols}}"  FROM " + {{$tablecnstsname}} + " WHERE " + {{.Constant.Name}} + " = ?",handler.ParseRows,SearchData))
}

{{end}}


func (handler *{{.StorageHandlerName}}) ReadAll()  SQLL.SQLLiteQueryResult {
	return handler.ConvertResult(handler.Executor.ExecuteResult("SELECT "{{.SelectDBColumns}}"  FROM " + {{.TableConstant.Name}}, handler.ParseRows))
}

func (handler *{{.StorageHandlerName}}) ParseRows(rows *sql.Rows) per.IQueryResult {
	{{range .StructDetails.Properties}}
	var {{.Name}} *{{.GType}}
	{{end}}
	results := []per.IDataItem{} //{{.StructDetails.Name}}{}

	for rows.Next() {
		err := rows.Scan({{.ScanRow}})
		//fmt.Println("READ: id: " + string(id) + "- Displayname:"+  displayname + "- Description:" + description)
		if err != nil {
			handler.Parent.LogErrorEf("ParseRows","Row Scan errr: %s ",err)
		} else {
			res := data.{{.StructDetails.Name}}{}
			{{range .StructDetails.Properties}}
				if {{.Name}} != nil {
					res.{{.Name}} = *{{.Name}}
					handler.Parent.LogDebugf("ParseRows","Set '%v' for {{.Name}}",*{{.Name}})
				} else {
					handler.Parent.LogDebugf("ParseRows","{.Name}} was NULL")
				}
			{{end}}

			results = append(results, res)
		}

	}
	return SQLL.NewDataQueryResult(true,results)
}
